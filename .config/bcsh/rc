#!/bin/bash

test -d /run/systemd/system && _HAVE_SYSTEMD=y || _HAVE_SYSTEMD=n

_canrun() {
    type "$@" >/dev/null 2>&1
}

_gettz() {
    local tz
    if [ "$_HAVE_SYSTEMD" = y ]; then
        # Once everything is on buster, this can be cleaned up to:
        # tz="$(timedatectl show --property=Timezone --value)"
        tz="$(timedatectl | awk '($1 $2 == "Timezone:") { print $3 }')"
    else
        read tz </etc/timezone
    fi
    if [ -n "$tz" ] && [ "$tz" = "${tz#Etc/}" ]; then
        echo "$tz"
    else
        echo America/New_York
    fi
}

_load_systemd_envvars() {
    local envfile="$(mktemp --tmpdir bcsh-XXXXXXXX.env)" || return $?
    printf "TZ=%s\n" "$(_gettz)" >>"$envfile"
    systemctl --user show-environment \
        | grep -vE '^(HOME|LANG|LOGNAME|PATH|SHELL|USER|USERNAME)=' >>"$envfile"
    source "$envfile" \
        && export $(awk '(match($0, "^[A-Z][A-Z0-9_]*=")) { print substr($0, 1, RLENGTH - 1) }' "$envfile")
    /bin/rm "$envfile"
}

_tryalias() {
    _canrun "$1" && shift && name="$1" && shift && eval "alias $name='$*'"
}

if [ -z "${EDITOR:-}" ]; then
    if EDITOR="$(which emacsclient 2>/dev/null)"; then
        export EDITOR ALTERNATE_EDITOR="$(which emacs)"
    elif EDITOR="$(which nano 2>/dev/null)"; then
        export EDITOR
    fi
fi
export GREP_COLOR="${GREP_COLOR:-1;32}"
export LESS="${LESS:-XRF}"
export LESSHISTFILE="${LESSHISTFILE:-${XDG_STATE_HOME:-$HOME/.local/state}/less/history}"
mkdir -p --mode=0700 "$(dirname "$LESSHISTFILE")"
export PAGER="${PAGER:-/usr/bin/less}"
export PYTHONSTARTUP="${PYTHONSTARTUP:-$ZDOTDIR/../pythonstartup.py}"
export RIPGREP_CONFIG_PATH="${RIPGREP_CONFIG_PATH:-$ZDOTDIR/../ripgrep/rc}"
if [ -z "${TZ:-}" ]; then
    export TZ="$(_gettz)"
fi

_fqdn="$(hostname --fqdn)"
PROMPT_HOST_FGC="$(echo "$_fqdn" | cksum | awk '{print $1 % 200 + 30}')"
_domainname="${_fqdn#*.}"
case "$_domainname" in
    "$_fqdn"|brettcsmith.org|*.brettcsmith.org) ;;
    *) PROMPT_HOST_BGC="$(echo "$_domainname" | cksum | awk '{print $1 % 12 + 52}')"
esac
if [ "$(id -u)" = 0 ]; then
    PROMPT_DELIM_COLOR=9
elif [ -n "$STY" ]; then
    PROMPT_DELIM_COLOR=7
fi

b() { ls -Alh --color=always "$@" | $PAGER; }
cdr() { cd "$(realpath "${1:-.}")"; }
cwdiff() { wdiff -n "$@" | colordiff | $PAGER; }
reallines() { grep -Ev '^[[:space:]]*($|#)' "$@" | $PAGER; }
stamp() { find "$@" -print0 | xargs -0 touch; }
today() { isodate now; }

if [ "$_HAVE_SYSTEMD" = y ]; then
    _load_systemd_envvars
    trap _load_systemd_envvars USR2

    _wrap_systemctl() {
        local cmd="$1"; shift
        local need_root
        if [ "$(id -u)" = 0 ]; then
            need_root=0
        else
            need_root=1
            for arg in "$@"; do
                case "$arg" in
                    --user*)
                        need_root=0
                        break
                        ;;
                esac
            done
        fi
        case "$need_root" in
            1) sudo "$cmd" "$@" ;;
            *) "$cmd" "$@" ;;
        esac
    }

    at() {
        if [ $# -lt 2 ]; then
            echo "usage: at <timespec> <command> [arg ...]" >&2
            return 2
        fi
        local when="$(date -d "$1" +%s)"; shift
        if [ "$when" -lt "$(date +%s)" ]; then
            when="$(( $when + 24 * 60 * 60 ))"
        fi
        local bin="$(which -a "$1" | grep '^/' | head -n1)"
        if ! [ -x "$bin" ]; then
            echo "at: $1: not an executable"
            return 3
        fi
        shift
        systemd-run --user --same-dir --on-calendar="@$when" "$bin" "$@"
    }

    if journalctl --system -n1 >/dev/null 2>&1; then
        jctl() { journalctl "$@"; }
    else
        jctl() { _wrap_systemctl journalctl "$@"; }
    fi
    sctl() { _wrap_systemctl systemctl "$@"; }
    alias ujctl='journalctl --user'
    alias usctl='systemctl --user'
    alias usrun='systemd-run --user --same-dir'
fi

bsplit() {
    local bytesize="$1"; shift
    local source outprefix
    if [ $# -ge 1 ]; then
        source="$1"; shift
    else
        source=-
    fi
    if [ $# -ge 1 ]; then
        outprefix="$1"
    elif [ "$source" = - ]; then
        outprefix="output."
    else
        outprefix="$(basename "$source")."
    fi
    split --numeric-suffixes=1 --bytes="$bytesize" "$source" "$outprefix"
}

if _canrun colordiff; then
    cdiff() {
        local last_arg
        eval "last_arg=\$$#"
        if [ -e "$last_arg" ]; then
            colordiff -u "$@"
        else
            colordiff "$@"
        fi
    }
fi

cmeta() {
    local obj=""
    if [ $# -gt 0 ]; then
        obj="$1"; shift
    fi
    curl --connect-timeout 1 "$@" "http://169.254.169.254/latest/meta-data/$obj" && echo
}

if _canrun csvtool; then
    csvl() {
        csvtool readable "$@" | $PAGER;
    }
fi

d() {
    if [ -z "$1" ]; then
        dirs -p
    elif [ -d "$1" ] || [ - = "$1" ] || [ "${1#+}" != "$1" ]; then
        eval pushd "\"$1\""
    elif [ "${1#-}" != "$1" ]; then
        dirs "$@"
    elif [ -z "${1#[0-9]}" ]; then
        eval pushd "\"+$1\""
    else
        echo "d: not directory or options: $@" >&2
        return 2
    fi
}

isodate() {
    local date_arg
    if [ -z "${1:-}" ] || [ "${1#-}" != "$1" ]; then
        date_arg=now
    else
        date_arg="$1"; shift
    fi
    date --iso-8601=date --date="$date_arg" "$@"
}

pl() {
    local newdir="$(pwd)"
    eval cd - >/dev/null
    eval pushd "\"$newdir\""
}

py() {
    if [ -z "$VIRTUAL_ENV" ] && type python3 >/dev/null 2>&1; then
        python3 "$@"
    else
        python "$@"
    fi
}

if _canrun rg; then
    g() { rg --color=always "$@" | $PAGER; }
else
    g() {
        grep -r --color=always --exclude-dir={CVS,.svn,.hg,.git} "$@" | $PAGER
    }
    rg() {
        grep -r --color=auto --exclude-dir={CVS,.svn,.hg,.git} "$@"
    }
fi

str() {
    if file -b "$1" | grep -q text; then
        $PAGER "$1"
    else
        strings -a "$1" | $PAGER
    fi
}

_up() {
    local nextpath
    if [ -z "$2" ]; then
        nextpath=".."
    elif [ -z "${2#[1-9]}" ]; then
        nextpath=""
        for i in $(seq 1 "$2"); do
            nextpath="${nextpath}../"
        done
    else
        nextpath="$(dirname "$(pwd)")"
        while [ "$nextpath" != "/" ]; do
            if basename "$nextpath" | grep -qFi "$2"; then
                break
            fi
            nextpath="$(dirname "$nextpath")"
        done
        if [ "$nextpath" = "/" ]; then
            echo "up: no match found for $2" >&2
            return 1
        fi
    fi
    eval "$1" "$nextpath"
}

if _canrun qrencode; then
    qr() {
        if [ -z "$1" ]; then
            echo "Usage: qr URL" >&2
            return 2
        fi
        fn="$(mktemp --tmpdir qr-XXXXXXXX.png)" && \
            qrencode -o "$fn" "$1" && eog "$fn" && /bin/rm -f "$fn"
    }
fi

if ! _canrun reattach && _canrun screen; then
    reattach() {
        screen -dR -S "${1:-default}"
    }
fi

if _canrun svn && _canrun colordiff; then
    svncdiff() {
        local revnum="${1:-}"
        if [[ "$revnum" =~ '^-?[cr]?-?[0-9]+$' && ! -e "$1" ]]; then
            revnum="${revnum#-}"
            revnum="${revnum#[cr]}"
            shift
            set -- "-c$revnum" "$@"
        fi
        svn diff "$@" | colordiff | $PAGER
    }

    svnclog() {
        svn log --diff "$@" | colordiff | $PAGER
    }
fi

vcsfind() {
    find \( -name 'CVS' -o -name '.svn' -o -name '.hg' -o -name '.git' \) \
        -not -prune -o \( "$@" \)
}

if _canrun emacsclient; then
    visit() {
        # Mimic the EMACS_SOCKET_NAME handling of Emacs 27+ on older versions
        if [ -n "${EMACS_SOCKET_NAME:-}" ]; then
            set -- -s "$EMACS_SOCKET_NAME" "$@"
        fi
        emacsclient -n "$@"
    }
fi

wrap() {
    local columns
    if [ "${1:-0}" -gt 0 ] 2>/dev/null; then
        columns="$1"; shift
    else
        columns="${COLUMNS:-80}"
    fi
    fold -sw "$columns" "$@"
}

_tryalias emacs wemacs VISUAL=emacs EDITOR=emacs
_tryalias emacsclient wemacsc VISUAL=emacsclient EDITOR=emacsclient
_tryalias ftp ftp ftp -p
_tryalias xdg-open o xdg-open
_tryalias git gg git grep
_tryalias grep cgrep grep --color=always
_tryalias grep vcscgrep grep --color=always -r --exclude-dir={CVS,.svn,.hg,.git}
_tryalias grep vcsgrep grep -r --exclude-dir={CVS,.svn,.hg,.git}
_tryalias ipv6calc rev6 ipv6calc --quiet --out revnibbles.arpa
_tryalias less l less
_tryalias nano wnano VISUAL=nano EDITOR=nano
_tryalias readlink realpath readlink -e
_tryalias shred zeroout shred -n 0 -z
_tryalias smartypants sp smartypants --attr qbdeu
_tryalias trash rm trash
_tryalias xclip xcopy xclip -selection clipboard
_tryalias xclip xpaste xclip -selection clipboard -o
_tryalias xkcdpass xkcdpass xkcdpass --count=8 --numwords=3
_tryalias xmodmap mx1k xmodmap ~/.config/xmodmap/mx1k
_tryalias xmodmap nomx1k xmodmap -e '"pointer = default"'
_tryalias youtube-dl ydl youtube-dl --prefer-free-formats \
          --output '"%(autonumber)s-%(title)s.%(ext)s"'

echo -n $PATH | tr : \\0 | xargs -0 ls -1p 2>/dev/null \
      | grep -E '^python[1-9][.0-9]*$' | while read pybin; do
    _tryalias "$pybin" "py${pybin#python}" "$pybin"
done
unset pybin

alias cp='cp -i'
alias mv='mv -i'
alias noproxy='http_proxy=""'
alias pd=popd
alias pip='py -m pip'
alias pydoc='py -m pydoc'
alias rrm=/bin/rm
alias up='_up cd'
alias upp='_up pushd'
alias venv='py -m venv'

_canrun x || alias x='dtrx'
[ -e "/usr/share/doc/mutt/manual.txt.gz" ] && \
    alias muttman='zless /usr/share/doc/mutt/manual.txt.gz'

if python3 -m markdown --version >/dev/null 2>&1; then
    markdown() { python3 -m markdown -x sane_lists -x tables "$@"; }
    sm() { markdown -x smarty "$@"; }
elif _canrun smartypants && _canrun markdown; then
    sm() {
        smartypants --attr qbdeu "$@" | markdown
    }
fi

[ -e "$ZDOTDIR/local" ] && source "$ZDOTDIR/local"
unset _canrun _tryalias
